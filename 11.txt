git
 1. 在本地git仓库使用git bash
 2. add remote name ssh
 3. pull 远程库名 master
11

抽象类
  from abc import ABCMeta,abstractmethod
  
  metaclass=ABCMeta 类的父类为抽象类

  @abstractmethod 这个装饰器装饰的方法 在子类中必须实现

  @classmethod 装饰的方法，不需要实例化对象 cls代表类本身

错误：
  不要忘记方法后面带的()!!!!

list 
  A[1]只能替换数值用，不能加入新的元素
  list.append()可以加入新建对象

  解压序列赋值给多个变量 可用*变量名代表任意多个赋值
  字符的split中也可用多变量赋值

类
  建立类的参数，可以传入def的函数
  实例的方法可以赋值为另一个方法
  strategypattern.py
  可以借用其余类的方法

内建函数
  all(a) return True if all elements of a is True,or a is empty
  any(a) return True if any elements of a is True,if a is empty,return False
  callable(object) Return True if the object argument appears callable, False if not. 
  chr(i) Unicode code point is the integer i
  @classmethod

正则表达式
  import re
  创建正则表达对象 正则变量=re.compile(r'(\d\d\d-\d\d\d))
  匹配Regex对象 匹配变量=正则变量.search('需查找的字符')
  匹配变量group() groups()
  用括号分组
  用管道|表达或的关系 (r'aaa(bbb|ccc)) aaa为固定前缀
  ？匹配0次或者1次
  *匹配0次或多次
  +匹配1次或多次
  {3}匹配固定次数 {3,5}3-5次
  非贪心模式，后面加？   {3，5}匹配5 {3,5}？匹配3
  findall 如果正则表达式没有分组，返回一个列表，
  如果有分组，返回一个字符串元组的列表

  字符分类
  /d 0-9的任何数字 /D 除0-9之外的字符
  /w 字母、数字或下划线
  /s 匹配空白

  自己的分类
  re.compile(r'[abcd])在这个类中的字符
  re.compile(r'[^abcd])不在这个类中的字符

  插入字符和美元字符
  re.compile(r'^hello')必须匹配hello开头的字符
  re.compile(r'hello$')必须匹配hello结尾的字符
  通配符
  .匹配一个字符
  .*匹配任意个字符 但不包括换行符
  re.compile('.*',re.DOTALL) 匹配所有字符包括换行符
  re.I 不区分大小写的匹配
  sub()方法 替换字符
  re.VERBOSE 正则多行表达式 忽略之前的换行和注释

文件操作
  import os
  os.getcwd()得到当前路径
  os.chdir('C:\\')切换当前路径
  os.makedirs('C:\\AA')创建新文件夹
  os.path.abspath(path)返回绝对路径
  os.path.isabs(path)
  os.path.relpath(path,start)开始和路径之间的字符
  os.path.dirname(path)路径名
  os.path.basename(path)文件名
  os.path.split()文件名和路径名分开
  splitos.path.sep
  os.path.getsize(path)文件大小
  os.listdir(path)文件名字符串列表
  os.path.exists(path)
  os.path.isfile(path)
  os.path.isdir(path)

  .read()
  .readline()
  .write()
  .close()
  shelve.open

  shutil.copy(源文件，目标文件位置) 复制文件
  shutil.copytree()复制文件夹内所有文件
  shutil.move
  os.unlink(path)删除文件
  os.rmdir(path)删除文件夹 文件夹必须为空
  shutil.rmtree(path)删除所有文件和文件夹
  send2trash

  os.walk()遍历目录树
  返回三个值，文件夹名称，子文件夹列表，文件列表
  os.listdir()遍历所有文件

requests
  requests.get('http://**')
  变量.status_code==requests.codes.ok 检查是否下载成功
  变量.raise_for_status()

openpyxl
  from openpyxl import Workbook
  Workbook() #create new workbook
  wb.save('aa.xlsx') #save file
  wb=load_workbook('test.xlsx') #open file data_only
  wb.active #the worksheet that is acived
  wb.create_sheet("sheetname",0) #'0' means insert at first position
  ws.title='New title' #change name
  ws.sheet_properties.tabColor='RRGGBB' #change background color of tabColor
  ws=wb['Sheet1'] #get a sheet 
  wb.sheetnames #all the sheets'name
  wb.copy_worksheet(source) #create copies of worksheets  image and charts not copied
  wb.remove_sheet(wb.get_sheet_by_name('aa'))

  ws['A4']
  ws.cell(row=4,column=2,value=10)
  ws['A1':'C2']
  ws['C']
  ws[10]
  ws.iter_rows(min_row=1,max_col=3,max_row=3) #return rows
  ws.iter_cols() #not available in read-only mode
  ws.max_row
  ws.max_column

  tuple(ws.rows) #iterate through all the rows
  tuple(ws.columns)
  ws.values

  from openpyxl.utils import get_column_letter

  ws.merge_cells('A2:D2')
  ws.unmerge_cells('A2:D2')

  image=Image('logo.png')
  ws.add_image(img,'A1')

  ws.column_dimensions.group('A','D',hidden=True)

  ws.insert_rows(7)
  ws.delete_cols(6,3)

  字体，风格
  openpyxl.styles import Font,style
  Font对象 Font(name='Calibri',size=14,bold=True,italic=True)
  style对象 =Style(font=font对象)
  ws['A'].style/style对象

  冻结窗格
  sheet.freeze_panes='A2'






















  

